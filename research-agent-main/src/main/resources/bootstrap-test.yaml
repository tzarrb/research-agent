server:
  port: 18080
  servlet:
    context-path: /research-agent/ai
    encoding:
      charset: UTF-8
      enabled: true
      force: true

# 部署时不配置，使用默认配置
management:
  endpoints:
    web:
      exposure:
        # 开放所有外部端点
        include: "*"
  endpoint:
    health:
      # 应用健康状态检查，携带详细信息
      show-details: always
  tracing:
    sampling:
      # trace 采样信息，记录每个请求
      probability: 1.0

#openapi: 3.1.0  # or 3.1.0
#info:
#  title: research agent 应用接口
#  description: Research Agent 智能体探索
#  version: 1.0.0

springdoc:
  swagger-ui:
    path: /swagger-ui.html
    tags-sorter: alpha
    operations-sorter: alpha
  api-docs:
    path: /v3/api-docs
  group-configs:
    - group: 'default'
      paths-to-match: '/**'
      packages-to-scan: com.ivan.researchagent

knife4j:
  #是否启用增强设置
  enable: true
  #开启生产环境屏蔽
  production: false
  #是否启用登录认证
  # basic:
  #   enable: true
  #  username: admin
  #  password: 123456
  setting:
    language: zh_cn
    enable-version: true
    enable-swagger-models: true

spring:
  main:
    allow-circular-references: true
  application:
    name: research-agent
  webflux:
    charset: UTF-8
    force-encoding: true
  data:
    redis:
      host: localhost
      port: 6379
      #password: 123456  # 无密码则省略
      database: 0
      lettuce:
        pool:
          max-active: 200
          max-idle: 50
          min-idle: 10
  #  datasource:
  #    url: jdbc:h2:mem:testdb
  #    username: sa
  #    password:
  #    driver-class-name: org.h2.Driver
  datasource:
    driver-class-name: org.postgresql.Driver
    url: jdbc:postgresql://localhost:5433/researchagent
    username: root
    password: 123456
  ai:
    vectorstore:
      pgvector:
        index-type: HNSW
        distance-type: COSINE_DISTANCE
        dimensions: 1536
        max-document-batch-size: 10000 # Optional: Maximum number of documents per batch
    #      redis:
    #        initialize-schema: true
    #        prefix: research-agent:vectorstore
    #        index: research-agent-index
    memory:
      # mysql:
      #   enabled: true
      redis:
        host: localhost
        port: 6379
        #password: 123456  # 无密码则省略
        timeout: 1000
    chat:
      client:
        enabled: false #false禁用 ChatClient.Builder bean 的自动配置，如果需要多个聊天模型一起使用，这会很有用，然后以编程方式创建 ChatClient.Builder，这样可以为每个聊天模型创建一个实例 ChatModel
        observations:
          # 记录调用输入, 注意：观测数据可能存在敏感信息！
          include-input: true
      observations:
        # 记录 LLMs 输出
        include-completion: true
        # 记录 prompt
        include-prompt: true
        include-error-logging: true
    dashscope:
      api-key: ${DASHSCOPE_API_KEY}
      chat:
        options:
          model: "qwen-max-latest" #qwen-max qwen-plus qwen-turbo deepseek-r1 deepseek-v3
      image:
        options:
          model: "dall-e-3"
      multi:
        options:
          model: "qwen-vl-max-latest"
      embedding:
        enabled: true
        options:
          model: "text-embedding-v1" #text-embedding-v3 text-embedding-v2 text-embedding-v1 multimodal-embedding-v1
    deepseek:
      base-url: "https://api.deepseek.com/v1"
      api-key: ${DEEPSEEK_API_KEY}
      chat:
        options:
          model: "deepseek-chat" #deepseek-coder deepseek-chat deepseek-reasoner
      embedding:
        enabled: false
#    openai:
#      api-key: {OPENAI_API_KEY}
#      chat:
#        options:
#          model: "gpt-4o-mini" # gpt-4o-mini gpt-4-turbo
#    openai:
#      base-url: "https://ark.cn-beijing.volces.com/api/v3" #火山引擎
#      api-key: ${ARK_API_KEY}
#      chat:
#        options:
#          model: "deepseek-v3-241226" #deepseek-r1-250120,deepseek-v3-241226
#      embedding:
#        enabled: false
    openai:
      base-url: "https://openrouter.ai/api/v1/chat/completions"
      api-key: ${OPENROUTER_API_KEY}
      chat:
        options:
          model: "anthropic/claude-sonnet-4" #
          # anthropic/claude-sonnet-4，anthropic/claude-opus-4
          # openai/gpt-4.5-preview，openai/gpt-4.1，openai/gpt-4.1-mini，openai/gpt-4.1-nano，
          # openai/o4-mini，openai/o4-mini-high，openai/o3，openai/o3-mini，openai/o3-pro
          # google/gemini-2.5-pro-preview，google/gemini-2.5-flash-preview-05-20，google/gemini-2.5-flash-preview-05-20:thinking
      embedding:
        enabled: false
    anthropic:
      base-url: "https://api.anthropic.com"
      api-key: ${ANTHROPIC_API_KEY}
      chat:
        options:
          model: "Claude-3.5-Sonnet" #Claude-3.5-Sonnet Claude-Haiku
      embedding:
        enabled: false
    gemini:
      base-url: "https://generativelanguage.googleapis.com/v1beta/openai/"
      api-key: ${GEMINI_API_KEY}
      chat:
        options:
          model: "gemini-2.5-flash" #gemini-2.5-pro-preview，gemini-2.5-flash
      embedding:
        enabled: false
    mistralai:
      base-url: "https://api.mistralai.com/v1"
      api-key: ${MISTRALAI_API_KEY}
      chat:
        options:
          model: "mistral-large-latest" #open-mistral-7b, open-mixtral-8x7b, open-mixtral-8x22b, mistral-small-latest, mistral-large-latest
      embedding:
        enabled: false
    qianfan:
      base-url: "api.qianfan.chat"
      api-key: ${QIANFAN_API_KEY}
      secret-key: ${QIANFAN_API_KEY}
      chat:
        options:
          model: 'ERNIE-4.0-8K'  #ERNIE-4.0-8K ERNIE-3.5-8K ERNIE-Speed-8K ERNIE-Lite-8K
      embedding:
        enabled: false
    zhipuai:
      base-url: 'open.bigmodel.cn/api/paas'
      api_key: ${ZHIPUAI_API_KEY}
      model: 'glm-4-0520' #glm-4-0520、glm-4 、glm-4-air、glm-4-airx、 glm-4-flash
      chat:
        options:
          model: 'glm-4-0520' #glm-4-0520、glm-4 、glm-4-air、glm-4-airx、 glm-4-flash
      image:
        options:
          model: "cogview-3"
      embedding:
        enabled: false
    ollama:
      base-url: "http://192.168.1.114:11434/v1"
      api-key: "sk_weimai_dev_2024"
      chat:
        options:
          model: "qwen2.5-coder:32b" #qwen2.5-coder:32b Deepseek-Coder-V2
      embedding:
        enabled: false
    mcp:
      client:
        enabled: true
        name: research-agent
        version: 1.0.0
        type: ASYNC #SYNC/ASYNC
        request-timeout: 60s
        toolcallback:
          enabled: true
        stdio:
          root-change-notification: true
          servers-configuration: classpath:/mcp-servers-config.json
#        sse:
#          connections:
#            mysql-dbhub:
#              url: http://localhost:8080
    alibaba:
      toolcalling:
        tavilysearch:
            enabled: true
            api-key: ${TAVILY_API_KEY}  # 必填项：你的 API 密钥
            base-url: https://api.tavily.com/search  # 可选，默认为官方 API 地址
        baidusearch:
            enabled: true
            base-url: https://www.baidu.com/  # 可选，则为官方 API 地址

deepseek:
  api-key: ${DEEPSEEK_API_KEY}  # 必填项：你的 API 密钥
  model: deepseek-reasoner
  base-url: https://api.deepseek.com  # 可选，默认为官方 API 地址

coze:
  access-token: ${COZE_ACCESS_TOKEN}
  work-flow:
    base-url: "https://api.coze.cn/v1/workflow/run"
    traveling-planner: "7447428622988542004"
    sources:
      traveling-planner: "7447428622988542004"

llm:
  ai:
    provider: "dashscope"
    model: "deepseek-v3"

doctor:
  token: ${DOCTOR_TOKEN}
  providerPageUrl: "https://test1.myweimai.com/medicalprovider/ums/provider/page"
  providerCancelUrl: "https://test1.myweimai.com/medicalprovider/provider/cancel"

logging:
  level:
    root: "info"
    org.springframework.ai: "debug"
    com.alibaba.cloud.api: "debug"
    io.modelcontextprotocol: "debug"